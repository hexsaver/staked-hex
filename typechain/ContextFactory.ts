/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Context } from "./Context";

export class ContextFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Context> {
    return super.deploy(overrides || {}) as Promise<Context>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Context {
    return super.attach(address) as Context;
  }
  connect(signer: Signer): ContextFactory {
    return super.connect(signer) as ContextFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Context {
    return new Contract(address, _abi, signerOrProvider) as Context;
  }
}

const _abi = [
  {
    inputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a7231582000d45e4448840004d6f1eedd6ec7a0fa153e435d6fa027c3dab464fffdb50c1b64736f6c634300050d0032";
