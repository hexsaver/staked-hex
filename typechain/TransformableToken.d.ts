/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TransformableTokenInterface extends ethers.utils.Interface {
  functions: {
    "allocatedSupply()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "btcAddressClaim(uint256,bytes32[],address,bytes32,bytes32,uint8,uint8,bytes32,bytes32,uint256,address)": FunctionFragment;
    "btcAddressClaims(bytes20)": FunctionFragment;
    "btcAddressIsClaimable(bytes20,uint256,bytes32[])": FunctionFragment;
    "btcAddressIsValid(bytes20,uint256,bytes32[])": FunctionFragment;
    "claimMessageMatchesSignature(address,bytes32,bytes32,bytes32,uint8,uint8,bytes32,bytes32)": FunctionFragment;
    "currentDay()": FunctionFragment;
    "dailyData(uint256)": FunctionFragment;
    "dailyDataRange(uint256,uint256)": FunctionFragment;
    "dailyDataUpdate(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "globalInfo()": FunctionFragment;
    "globals()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "merkleProofIsValid(bytes32,bytes32[])": FunctionFragment;
    "name()": FunctionFragment;
    "pubKeyToBtcAddress(bytes32,bytes32,uint8)": FunctionFragment;
    "pubKeyToEthAddress(bytes32,bytes32)": FunctionFragment;
    "stakeCount(address)": FunctionFragment;
    "stakeEnd(uint256,uint40)": FunctionFragment;
    "stakeGoodAccounting(address,uint256,uint40)": FunctionFragment;
    "stakeLists(address,uint256)": FunctionFragment;
    "stakeStart(uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "xfLobby(uint256)": FunctionFragment;
    "xfLobbyEnter(address)": FunctionFragment;
    "xfLobbyEntry(address,uint256)": FunctionFragment;
    "xfLobbyExit(uint256,uint256)": FunctionFragment;
    "xfLobbyFlush()": FunctionFragment;
    "xfLobbyMembers(uint256,address)": FunctionFragment;
    "xfLobbyPendingDays(address)": FunctionFragment;
    "xfLobbyRange(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocatedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "btcAddressClaim",
    values: [
      BigNumberish,
      BytesLike[],
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "btcAddressClaims",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "btcAddressIsClaimable",
    values: [BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "btcAddressIsValid",
    values: [BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMessageMatchesSignature",
    values: [
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyDataRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyDataUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "globalInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "globals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleProofIsValid",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pubKeyToBtcAddress",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pubKeyToEthAddress",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "stakeCount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeEnd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeGoodAccounting",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeLists",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeStart",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xfLobby",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xfLobbyEnter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "xfLobbyEntry",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xfLobbyExit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xfLobbyFlush",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xfLobbyMembers",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "xfLobbyPendingDays",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "xfLobbyRange",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocatedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "btcAddressClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "btcAddressClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "btcAddressIsClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "btcAddressIsValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMessageMatchesSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentDay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dailyData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailyDataRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyDataUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "globalInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "globals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleProofIsValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pubKeyToBtcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pubKeyToEthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeGoodAccounting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeLists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xfLobby", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xfLobbyEnter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xfLobbyEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xfLobbyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xfLobbyFlush",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xfLobbyMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xfLobbyPendingDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xfLobbyRange",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Claim(uint256,uint256,bytes20,address,address)": EventFragment;
    "ClaimAssist(uint256,uint256,uint256,address)": EventFragment;
    "DailyDataUpdate(uint256,address)": EventFragment;
    "ShareRateChange(uint256,uint40)": EventFragment;
    "StakeEnd(uint256,uint256,address,uint40)": EventFragment;
    "StakeGoodAccounting(uint256,uint256,address,uint40,address)": EventFragment;
    "StakeStart(uint256,address,uint40)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "XfLobbyEnter(uint256,address,uint256,address)": EventFragment;
    "XfLobbyExit(uint256,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimAssist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DailyDataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShareRateChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeGoodAccounting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XfLobbyEnter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XfLobbyExit"): EventFragment;
}

export class TransformableToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TransformableTokenInterface;

  functions: {
    allocatedSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "allocatedSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    btcAddressClaim(
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      claimToAddr: string,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      autoStakeDays: BigNumberish,
      referrerAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "btcAddressClaim(uint256,bytes32[],address,bytes32,bytes32,uint8,uint8,bytes32,bytes32,uint256,address)"(
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      claimToAddr: string,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      autoStakeDays: BigNumberish,
      referrerAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    btcAddressClaims(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "btcAddressClaims(bytes20)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    btcAddressIsClaimable(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "btcAddressIsClaimable(bytes20,uint256,bytes32[])"(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    btcAddressIsValid(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "btcAddressIsValid(bytes20,uint256,bytes32[])"(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    claimMessageMatchesSignature(
      claimToAddr: string,
      claimParamHash: BytesLike,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "claimMessageMatchesSignature(address,bytes32,bytes32,bytes32,uint8,uint8,bytes32,bytes32)"(
      claimToAddr: string,
      claimParamHash: BytesLike,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    currentDay(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "currentDay()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    dailyData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      dayPayoutTotal: BigNumber;
      dayStakeSharesTotal: BigNumber;
      dayUnclaimedSatoshisTotal: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "dailyData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      dayPayoutTotal: BigNumber;
      dayStakeSharesTotal: BigNumber;
      dayUnclaimedSatoshisTotal: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    dailyDataRange(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      list: BigNumber[];
      0: BigNumber[];
    }>;

    "dailyDataRange(uint256,uint256)"(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      list: BigNumber[];
      0: BigNumber[];
    }>;

    dailyDataUpdate(
      beforeDay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "dailyDataUpdate(uint256)"(
      beforeDay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    globalInfo(overrides?: CallOverrides): Promise<{
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "globalInfo()"(overrides?: CallOverrides): Promise<{
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    globals(overrides?: CallOverrides): Promise<{
      lockedHeartsTotal: BigNumber;
      nextStakeSharesTotal: BigNumber;
      shareRate: number;
      stakePenaltyTotal: BigNumber;
      dailyDataCount: number;
      stakeSharesTotal: BigNumber;
      latestStakeId: number;
      claimStats: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: number;
      7: BigNumber;
    }>;

    "globals()"(overrides?: CallOverrides): Promise<{
      lockedHeartsTotal: BigNumber;
      nextStakeSharesTotal: BigNumber;
      shareRate: number;
      stakePenaltyTotal: BigNumber;
      dailyDataCount: number;
      stakeSharesTotal: BigNumber;
      latestStakeId: number;
      claimStats: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: number;
      7: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    merkleProofIsValid(
      merkleLeaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "merkleProofIsValid(bytes32,bytes32[])"(
      merkleLeaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pubKeyToBtcAddress(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pubKeyToBtcAddress(bytes32,bytes32,uint8)"(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pubKeyToEthAddress(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pubKeyToEthAddress(bytes32,bytes32)"(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    stakeCount(
      stakerAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "stakeCount(address)"(
      stakerAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    stakeEnd(
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeEnd(uint256,uint40)"(
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeGoodAccounting(
      stakerAddr: string,
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeGoodAccounting(address,uint256,uint40)"(
      stakerAddr: string,
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeLists(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      stakeId: number;
      stakedHearts: BigNumber;
      stakeShares: BigNumber;
      lockedDay: number;
      stakedDays: number;
      unlockedDay: number;
      isAutoStake: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: boolean;
    }>;

    "stakeLists(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      stakeId: number;
      stakedHearts: BigNumber;
      stakeShares: BigNumber;
      lockedDay: number;
      stakedDays: number;
      unlockedDay: number;
      isAutoStake: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: boolean;
    }>;

    stakeStart(
      newStakedHearts: BigNumberish,
      newStakedDays: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeStart(uint256,uint256)"(
      newStakedHearts: BigNumberish,
      newStakedDays: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    xfLobby(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "xfLobby(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    xfLobbyEnter(
      referrerAddr: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "xfLobbyEnter(address)"(
      referrerAddr: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    xfLobbyEntry(
      memberAddr: string,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rawAmount: BigNumber;
      referrerAddr: string;
      0: BigNumber;
      1: string;
    }>;

    "xfLobbyEntry(address,uint256)"(
      memberAddr: string,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rawAmount: BigNumber;
      referrerAddr: string;
      0: BigNumber;
      1: string;
    }>;

    xfLobbyExit(
      enterDay: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "xfLobbyExit(uint256,uint256)"(
      enterDay: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    xfLobbyFlush(overrides?: Overrides): Promise<ContractTransaction>;

    "xfLobbyFlush()"(overrides?: Overrides): Promise<ContractTransaction>;

    xfLobbyMembers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      headIndex: number;
      tailIndex: number;
      0: number;
      1: number;
    }>;

    "xfLobbyMembers(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      headIndex: number;
      tailIndex: number;
      0: number;
      1: number;
    }>;

    xfLobbyPendingDays(
      memberAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      words: [BigNumber, BigNumber];
      0: [BigNumber, BigNumber];
    }>;

    "xfLobbyPendingDays(address)"(
      memberAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      words: [BigNumber, BigNumber];
      0: [BigNumber, BigNumber];
    }>;

    xfLobbyRange(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      list: BigNumber[];
      0: BigNumber[];
    }>;

    "xfLobbyRange(uint256,uint256)"(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      list: BigNumber[];
      0: BigNumber[];
    }>;
  };

  allocatedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "allocatedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  btcAddressClaim(
    rawSatoshis: BigNumberish,
    proof: BytesLike[],
    claimToAddr: string,
    pubKeyX: BytesLike,
    pubKeyY: BytesLike,
    claimFlags: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    autoStakeDays: BigNumberish,
    referrerAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "btcAddressClaim(uint256,bytes32[],address,bytes32,bytes32,uint8,uint8,bytes32,bytes32,uint256,address)"(
    rawSatoshis: BigNumberish,
    proof: BytesLike[],
    claimToAddr: string,
    pubKeyX: BytesLike,
    pubKeyY: BytesLike,
    claimFlags: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    autoStakeDays: BigNumberish,
    referrerAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  btcAddressClaims(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "btcAddressClaims(bytes20)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  btcAddressIsClaimable(
    btcAddr: BytesLike,
    rawSatoshis: BigNumberish,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "btcAddressIsClaimable(bytes20,uint256,bytes32[])"(
    btcAddr: BytesLike,
    rawSatoshis: BigNumberish,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  btcAddressIsValid(
    btcAddr: BytesLike,
    rawSatoshis: BigNumberish,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "btcAddressIsValid(bytes20,uint256,bytes32[])"(
    btcAddr: BytesLike,
    rawSatoshis: BigNumberish,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimMessageMatchesSignature(
    claimToAddr: string,
    claimParamHash: BytesLike,
    pubKeyX: BytesLike,
    pubKeyY: BytesLike,
    claimFlags: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "claimMessageMatchesSignature(address,bytes32,bytes32,bytes32,uint8,uint8,bytes32,bytes32)"(
    claimToAddr: string,
    claimParamHash: BytesLike,
    pubKeyX: BytesLike,
    pubKeyY: BytesLike,
    claimFlags: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentDay(overrides?: CallOverrides): Promise<BigNumber>;

  "currentDay()"(overrides?: CallOverrides): Promise<BigNumber>;

  dailyData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    dayPayoutTotal: BigNumber;
    dayStakeSharesTotal: BigNumber;
    dayUnclaimedSatoshisTotal: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "dailyData(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    dayPayoutTotal: BigNumber;
    dayStakeSharesTotal: BigNumber;
    dayUnclaimedSatoshisTotal: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  dailyDataRange(
    beginDay: BigNumberish,
    endDay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "dailyDataRange(uint256,uint256)"(
    beginDay: BigNumberish,
    endDay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  dailyDataUpdate(
    beforeDay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "dailyDataUpdate(uint256)"(
    beforeDay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  globalInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  "globalInfo()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  globals(overrides?: CallOverrides): Promise<{
    lockedHeartsTotal: BigNumber;
    nextStakeSharesTotal: BigNumber;
    shareRate: number;
    stakePenaltyTotal: BigNumber;
    dailyDataCount: number;
    stakeSharesTotal: BigNumber;
    latestStakeId: number;
    claimStats: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: number;
    3: BigNumber;
    4: number;
    5: BigNumber;
    6: number;
    7: BigNumber;
  }>;

  "globals()"(overrides?: CallOverrides): Promise<{
    lockedHeartsTotal: BigNumber;
    nextStakeSharesTotal: BigNumber;
    shareRate: number;
    stakePenaltyTotal: BigNumber;
    dailyDataCount: number;
    stakeSharesTotal: BigNumber;
    latestStakeId: number;
    claimStats: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: number;
    3: BigNumber;
    4: number;
    5: BigNumber;
    6: number;
    7: BigNumber;
  }>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  merkleProofIsValid(
    merkleLeaf: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "merkleProofIsValid(bytes32,bytes32[])"(
    merkleLeaf: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  pubKeyToBtcAddress(
    pubKeyX: BytesLike,
    pubKeyY: BytesLike,
    claimFlags: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "pubKeyToBtcAddress(bytes32,bytes32,uint8)"(
    pubKeyX: BytesLike,
    pubKeyY: BytesLike,
    claimFlags: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pubKeyToEthAddress(
    pubKeyX: BytesLike,
    pubKeyY: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "pubKeyToEthAddress(bytes32,bytes32)"(
    pubKeyX: BytesLike,
    pubKeyY: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  stakeCount(stakerAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "stakeCount(address)"(
    stakerAddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeEnd(
    stakeIndex: BigNumberish,
    stakeIdParam: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeEnd(uint256,uint40)"(
    stakeIndex: BigNumberish,
    stakeIdParam: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeGoodAccounting(
    stakerAddr: string,
    stakeIndex: BigNumberish,
    stakeIdParam: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeGoodAccounting(address,uint256,uint40)"(
    stakerAddr: string,
    stakeIndex: BigNumberish,
    stakeIdParam: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeLists(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    stakeId: number;
    stakedHearts: BigNumber;
    stakeShares: BigNumber;
    lockedDay: number;
    stakedDays: number;
    unlockedDay: number;
    isAutoStake: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: number;
    4: number;
    5: number;
    6: boolean;
  }>;

  "stakeLists(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    stakeId: number;
    stakedHearts: BigNumber;
    stakeShares: BigNumber;
    lockedDay: number;
    stakedDays: number;
    unlockedDay: number;
    isAutoStake: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber;
    3: number;
    4: number;
    5: number;
    6: boolean;
  }>;

  stakeStart(
    newStakedHearts: BigNumberish,
    newStakedDays: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeStart(uint256,uint256)"(
    newStakedHearts: BigNumberish,
    newStakedDays: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  xfLobby(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "xfLobby(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  xfLobbyEnter(
    referrerAddr: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "xfLobbyEnter(address)"(
    referrerAddr: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  xfLobbyEntry(
    memberAddr: string,
    entryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    rawAmount: BigNumber;
    referrerAddr: string;
    0: BigNumber;
    1: string;
  }>;

  "xfLobbyEntry(address,uint256)"(
    memberAddr: string,
    entryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    rawAmount: BigNumber;
    referrerAddr: string;
    0: BigNumber;
    1: string;
  }>;

  xfLobbyExit(
    enterDay: BigNumberish,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "xfLobbyExit(uint256,uint256)"(
    enterDay: BigNumberish,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  xfLobbyFlush(overrides?: Overrides): Promise<ContractTransaction>;

  "xfLobbyFlush()"(overrides?: Overrides): Promise<ContractTransaction>;

  xfLobbyMembers(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    headIndex: number;
    tailIndex: number;
    0: number;
    1: number;
  }>;

  "xfLobbyMembers(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<{
    headIndex: number;
    tailIndex: number;
    0: number;
    1: number;
  }>;

  xfLobbyPendingDays(
    memberAddr: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "xfLobbyPendingDays(address)"(
    memberAddr: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  xfLobbyRange(
    beginDay: BigNumberish,
    endDay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "xfLobbyRange(uint256,uint256)"(
    beginDay: BigNumberish,
    endDay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    allocatedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "allocatedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcAddressClaim(
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      claimToAddr: string,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      autoStakeDays: BigNumberish,
      referrerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "btcAddressClaim(uint256,bytes32[],address,bytes32,bytes32,uint8,uint8,bytes32,bytes32,uint256,address)"(
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      claimToAddr: string,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      autoStakeDays: BigNumberish,
      referrerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcAddressClaims(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "btcAddressClaims(bytes20)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    btcAddressIsClaimable(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "btcAddressIsClaimable(bytes20,uint256,bytes32[])"(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    btcAddressIsValid(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "btcAddressIsValid(bytes20,uint256,bytes32[])"(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimMessageMatchesSignature(
      claimToAddr: string,
      claimParamHash: BytesLike,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimMessageMatchesSignature(address,bytes32,bytes32,bytes32,uint8,uint8,bytes32,bytes32)"(
      claimToAddr: string,
      claimParamHash: BytesLike,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentDay(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDay()"(overrides?: CallOverrides): Promise<BigNumber>;

    dailyData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      dayPayoutTotal: BigNumber;
      dayStakeSharesTotal: BigNumber;
      dayUnclaimedSatoshisTotal: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "dailyData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      dayPayoutTotal: BigNumber;
      dayStakeSharesTotal: BigNumber;
      dayUnclaimedSatoshisTotal: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    dailyDataRange(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "dailyDataRange(uint256,uint256)"(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    dailyDataUpdate(
      beforeDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "dailyDataUpdate(uint256)"(
      beforeDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    globalInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    "globalInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    globals(overrides?: CallOverrides): Promise<{
      lockedHeartsTotal: BigNumber;
      nextStakeSharesTotal: BigNumber;
      shareRate: number;
      stakePenaltyTotal: BigNumber;
      dailyDataCount: number;
      stakeSharesTotal: BigNumber;
      latestStakeId: number;
      claimStats: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: number;
      7: BigNumber;
    }>;

    "globals()"(overrides?: CallOverrides): Promise<{
      lockedHeartsTotal: BigNumber;
      nextStakeSharesTotal: BigNumber;
      shareRate: number;
      stakePenaltyTotal: BigNumber;
      dailyDataCount: number;
      stakeSharesTotal: BigNumber;
      latestStakeId: number;
      claimStats: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: number;
      7: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleProofIsValid(
      merkleLeaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "merkleProofIsValid(bytes32,bytes32[])"(
      merkleLeaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    pubKeyToBtcAddress(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "pubKeyToBtcAddress(bytes32,bytes32,uint8)"(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pubKeyToEthAddress(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "pubKeyToEthAddress(bytes32,bytes32)"(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    stakeCount(
      stakerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeCount(address)"(
      stakerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeEnd(
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeEnd(uint256,uint40)"(
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeGoodAccounting(
      stakerAddr: string,
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeGoodAccounting(address,uint256,uint40)"(
      stakerAddr: string,
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeLists(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      stakeId: number;
      stakedHearts: BigNumber;
      stakeShares: BigNumber;
      lockedDay: number;
      stakedDays: number;
      unlockedDay: number;
      isAutoStake: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: boolean;
    }>;

    "stakeLists(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      stakeId: number;
      stakedHearts: BigNumber;
      stakeShares: BigNumber;
      lockedDay: number;
      stakedDays: number;
      unlockedDay: number;
      isAutoStake: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: boolean;
    }>;

    stakeStart(
      newStakedHearts: BigNumberish,
      newStakedDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeStart(uint256,uint256)"(
      newStakedHearts: BigNumberish,
      newStakedDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    xfLobby(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "xfLobby(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xfLobbyEnter(
      referrerAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "xfLobbyEnter(address)"(
      referrerAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    xfLobbyEntry(
      memberAddr: string,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rawAmount: BigNumber;
      referrerAddr: string;
      0: BigNumber;
      1: string;
    }>;

    "xfLobbyEntry(address,uint256)"(
      memberAddr: string,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      rawAmount: BigNumber;
      referrerAddr: string;
      0: BigNumber;
      1: string;
    }>;

    xfLobbyExit(
      enterDay: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "xfLobbyExit(uint256,uint256)"(
      enterDay: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    xfLobbyFlush(overrides?: CallOverrides): Promise<void>;

    "xfLobbyFlush()"(overrides?: CallOverrides): Promise<void>;

    xfLobbyMembers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      headIndex: number;
      tailIndex: number;
      0: number;
      1: number;
    }>;

    "xfLobbyMembers(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      headIndex: number;
      tailIndex: number;
      0: number;
      1: number;
    }>;

    xfLobbyPendingDays(
      memberAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "xfLobbyPendingDays(address)"(
      memberAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    xfLobbyRange(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "xfLobbyRange(uint256,uint256)"(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Claim(
      data0: null,
      data1: null,
      btcAddr: BytesLike | null,
      claimToAddr: string | null,
      referrerAddr: string | null
    ): EventFilter;

    ClaimAssist(
      data0: null,
      data1: null,
      data2: null,
      senderAddr: string | null
    ): EventFilter;

    DailyDataUpdate(data0: null, updaterAddr: string | null): EventFilter;

    ShareRateChange(data0: null, stakeId: BigNumberish | null): EventFilter;

    StakeEnd(
      data0: null,
      data1: null,
      stakerAddr: string | null,
      stakeId: BigNumberish | null
    ): EventFilter;

    StakeGoodAccounting(
      data0: null,
      data1: null,
      stakerAddr: string | null,
      stakeId: BigNumberish | null,
      senderAddr: string | null
    ): EventFilter;

    StakeStart(
      data0: null,
      stakerAddr: string | null,
      stakeId: BigNumberish | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    XfLobbyEnter(
      data0: null,
      memberAddr: string | null,
      entryId: BigNumberish | null,
      referrerAddr: string | null
    ): EventFilter;

    XfLobbyExit(
      data0: null,
      memberAddr: string | null,
      entryId: BigNumberish | null,
      referrerAddr: string | null
    ): EventFilter;
  };

  estimateGas: {
    allocatedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "allocatedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcAddressClaim(
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      claimToAddr: string,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      autoStakeDays: BigNumberish,
      referrerAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "btcAddressClaim(uint256,bytes32[],address,bytes32,bytes32,uint8,uint8,bytes32,bytes32,uint256,address)"(
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      claimToAddr: string,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      autoStakeDays: BigNumberish,
      referrerAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    btcAddressClaims(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "btcAddressClaims(bytes20)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcAddressIsClaimable(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "btcAddressIsClaimable(bytes20,uint256,bytes32[])"(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcAddressIsValid(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "btcAddressIsValid(bytes20,uint256,bytes32[])"(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMessageMatchesSignature(
      claimToAddr: string,
      claimParamHash: BytesLike,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimMessageMatchesSignature(address,bytes32,bytes32,bytes32,uint8,uint8,bytes32,bytes32)"(
      claimToAddr: string,
      claimParamHash: BytesLike,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentDay(overrides?: CallOverrides): Promise<BigNumber>;

    "currentDay()"(overrides?: CallOverrides): Promise<BigNumber>;

    dailyData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dailyData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyDataRange(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dailyDataRange(uint256,uint256)"(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyDataUpdate(
      beforeDay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "dailyDataUpdate(uint256)"(
      beforeDay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    globalInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "globalInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    globals(overrides?: CallOverrides): Promise<BigNumber>;

    "globals()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    merkleProofIsValid(
      merkleLeaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "merkleProofIsValid(bytes32,bytes32[])"(
      merkleLeaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    pubKeyToBtcAddress(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pubKeyToBtcAddress(bytes32,bytes32,uint8)"(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pubKeyToEthAddress(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pubKeyToEthAddress(bytes32,bytes32)"(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeCount(
      stakerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeCount(address)"(
      stakerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeEnd(
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeEnd(uint256,uint40)"(
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeGoodAccounting(
      stakerAddr: string,
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeGoodAccounting(address,uint256,uint40)"(
      stakerAddr: string,
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeLists(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeLists(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeStart(
      newStakedHearts: BigNumberish,
      newStakedDays: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeStart(uint256,uint256)"(
      newStakedHearts: BigNumberish,
      newStakedDays: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    xfLobby(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "xfLobby(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xfLobbyEnter(
      referrerAddr: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "xfLobbyEnter(address)"(
      referrerAddr: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    xfLobbyEntry(
      memberAddr: string,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "xfLobbyEntry(address,uint256)"(
      memberAddr: string,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xfLobbyExit(
      enterDay: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "xfLobbyExit(uint256,uint256)"(
      enterDay: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    xfLobbyFlush(overrides?: Overrides): Promise<BigNumber>;

    "xfLobbyFlush()"(overrides?: Overrides): Promise<BigNumber>;

    xfLobbyMembers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "xfLobbyMembers(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xfLobbyPendingDays(
      memberAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "xfLobbyPendingDays(address)"(
      memberAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xfLobbyRange(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "xfLobbyRange(uint256,uint256)"(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocatedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allocatedSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    btcAddressClaim(
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      claimToAddr: string,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      autoStakeDays: BigNumberish,
      referrerAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "btcAddressClaim(uint256,bytes32[],address,bytes32,bytes32,uint8,uint8,bytes32,bytes32,uint256,address)"(
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      claimToAddr: string,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      autoStakeDays: BigNumberish,
      referrerAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    btcAddressClaims(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "btcAddressClaims(bytes20)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    btcAddressIsClaimable(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "btcAddressIsClaimable(bytes20,uint256,bytes32[])"(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    btcAddressIsValid(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "btcAddressIsValid(bytes20,uint256,bytes32[])"(
      btcAddr: BytesLike,
      rawSatoshis: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimMessageMatchesSignature(
      claimToAddr: string,
      claimParamHash: BytesLike,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimMessageMatchesSignature(address,bytes32,bytes32,bytes32,uint8,uint8,bytes32,bytes32)"(
      claimToAddr: string,
      claimParamHash: BytesLike,
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentDay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dailyData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dailyData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyDataRange(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dailyDataRange(uint256,uint256)"(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyDataUpdate(
      beforeDay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "dailyDataUpdate(uint256)"(
      beforeDay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    globalInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "globalInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "globals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    merkleProofIsValid(
      merkleLeaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "merkleProofIsValid(bytes32,bytes32[])"(
      merkleLeaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pubKeyToBtcAddress(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pubKeyToBtcAddress(bytes32,bytes32,uint8)"(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      claimFlags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pubKeyToEthAddress(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pubKeyToEthAddress(bytes32,bytes32)"(
      pubKeyX: BytesLike,
      pubKeyY: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeCount(
      stakerAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakeCount(address)"(
      stakerAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeEnd(
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeEnd(uint256,uint40)"(
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeGoodAccounting(
      stakerAddr: string,
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeGoodAccounting(address,uint256,uint40)"(
      stakerAddr: string,
      stakeIndex: BigNumberish,
      stakeIdParam: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeLists(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakeLists(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeStart(
      newStakedHearts: BigNumberish,
      newStakedDays: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeStart(uint256,uint256)"(
      newStakedHearts: BigNumberish,
      newStakedDays: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    xfLobby(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "xfLobby(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xfLobbyEnter(
      referrerAddr: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "xfLobbyEnter(address)"(
      referrerAddr: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    xfLobbyEntry(
      memberAddr: string,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "xfLobbyEntry(address,uint256)"(
      memberAddr: string,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xfLobbyExit(
      enterDay: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "xfLobbyExit(uint256,uint256)"(
      enterDay: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    xfLobbyFlush(overrides?: Overrides): Promise<PopulatedTransaction>;

    "xfLobbyFlush()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    xfLobbyMembers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "xfLobbyMembers(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xfLobbyPendingDays(
      memberAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "xfLobbyPendingDays(address)"(
      memberAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xfLobbyRange(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "xfLobbyRange(uint256,uint256)"(
      beginDay: BigNumberish,
      endDay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
